import 'dart:convert';
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';
import '../api/google_sheets_service.dart';

class DataCacheService {
  static const String _usersCacheKey = 'cached_users';
  static const String _lastUpdateKey = 'last_update_timestamp';
  static const int _updateIntervalMinutes = 10;
  
  static Timer? _updateTimer;
  static List<Map<String, dynamic>>? _cachedUsers;
  static DateTime? _lastUpdate;

  // Inicializar o servi√ßo de cache
  static Future<void> initialize() async {
    print('üöÄ Inicializando DataCacheService...');
    
    // Carregar dados do cache local
    await _loadFromCache();
    
    // Verificar se precisa atualizar
    if (_shouldUpdate()) {
      print('üîÑ Dados desatualizados, atualizando...');
      await _updateData();
    } else {
      print('‚úÖ Dados em cache ainda v√°lidos');
    }
    
    // Configurar timer para atualiza√ß√£o autom√°tica
    _startUpdateTimer();
  }

  // Verificar se precisa atualizar (mais de 10 minutos desde √∫ltima atualiza√ß√£o)
  static bool _shouldUpdate() {
    if (_lastUpdate == null) return true;
    
    final now = DateTime.now();
    final difference = now.difference(_lastUpdate!);
    return difference.inMinutes >= _updateIntervalMinutes;
  }

  // Carregar dados do cache local
  static Future<void> _loadFromCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Carregar usu√°rios
      final usersJson = prefs.getString(_usersCacheKey);
      if (usersJson != null) {
        final List<dynamic> usersList = json.decode(usersJson);
        _cachedUsers = usersList.cast<Map<String, dynamic>>();
        print('üì¶ ${_cachedUsers!.length} usu√°rios carregados do cache');
      }
      
      // Carregar timestamp da √∫ltima atualiza√ß√£o
      final lastUpdateMillis = prefs.getInt(_lastUpdateKey);
      if (lastUpdateMillis != null) {
        _lastUpdate = DateTime.fromMillisecondsSinceEpoch(lastUpdateMillis);
        print('üïí √öltima atualiza√ß√£o: $_lastUpdate');
      }
    } catch (e) {
      print('‚ö†Ô∏è Erro ao carregar cache: $e');
    }
  }

  // Salvar dados no cache local
  static Future<void> _saveToCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Salvar usu√°rios
      if (_cachedUsers != null) {
        final usersJson = json.encode(_cachedUsers);
        await prefs.setString(_usersCacheKey, usersJson);
        print('üíæ ${_cachedUsers!.length} usu√°rios salvos no cache');
      }
      
      // Salvar timestamp
      final now = DateTime.now();
      await prefs.setInt(_lastUpdateKey, now.millisecondsSinceEpoch);
      _lastUpdate = now;
      print('üïí Timestamp de atualiza√ß√£o salvo: $_lastUpdate');
    } catch (e) {
      print('‚ö†Ô∏è Erro ao salvar cache: $e');
    }
  }

  // Atualizar dados da planilha
  static Future<void> _updateData() async {
    try {
      print('üì° Atualizando dados da planilha...');
      final users = await GoogleSheetsService.getUsers();
      _cachedUsers = users;
      await _saveToCache();
      print('‚úÖ Dados atualizados com sucesso!');
    } catch (e) {
      print('‚ùå Erro ao atualizar dados: $e');
      // Se falhar na atualiza√ß√£o, manter dados em cache se dispon√≠vel
      if (_cachedUsers == null) {
        print('‚ö†Ô∏è Nenhum dado em cache dispon√≠vel');
      }
    }
  }

  // Iniciar timer para atualiza√ß√£o autom√°tica
  static void _startUpdateTimer() {
    _updateTimer?.cancel();
    _updateTimer = Timer.periodic(
      Duration(minutes: _updateIntervalMinutes),
      (timer) async {
        print('‚è∞ Timer disparado - atualizando dados...');
        await _updateData();
      },
    );
    print('‚è∞ Timer configurado para atualizar a cada $_updateIntervalMinutes minutos');
  }

  // Parar timer
  static void dispose() {
    _updateTimer?.cancel();
    print('üõë Timer de atualiza√ß√£o cancelado');
  }

  // Obter usu√°rios (do cache ou da planilha)
  static Future<List<Map<String, dynamic>>> getUsers() async {
    if (_cachedUsers != null) {
      print('üì¶ Retornando ${_cachedUsers!.length} usu√°rios do cache');
      return _cachedUsers!;
    } else {
      print('üîÑ Cache vazio, buscando dados da planilha...');
      await _updateData();
      return _cachedUsers ?? [];
    }
  }

  // Autenticar usu√°rio usando cache
  static Future<Map<String, dynamic>?> authenticateUser(String email, String password) async {
    try {
      print('üîê Tentando autenticar usu√°rio: $email');
      final users = await getUsers();
      
      for (var user in users) {
        if (user['EMAIL'] == email && user['SENHA'] == password) {
          print('‚úÖ Usu√°rio autenticado com sucesso!');
          return {
            'nome': user['NOME'] ?? '',
            'email': user['EMAIL'] ?? '',
            'telefone': user['TELEFONE'] ?? '',
            'senha': user['SENHA'] ?? '',
          };
        }
      }
      print('‚ùå Usu√°rio n√£o encontrado ou senha incorreta');
      return null;
    } catch (e) {
      print('üí• Erro na autentica√ß√£o: $e');
      throw Exception('Erro na autentica√ß√£o: $e');
    }
  }

  // Verificar se email existe usando cache
  static Future<bool> emailExists(String email) async {
    try {
      final users = await getUsers();
      return users.any((user) => user['EMAIL'] == email);
    } catch (e) {
      throw Exception('Erro ao verificar email: $e');
    }
  }

  // Buscar usu√°rio por email usando cache
  static Future<Map<String, dynamic>?> getUserByEmail(String email) async {
    try {
      final users = await getUsers();
      
      for (var user in users) {
        if (user['EMAIL'] == email) {
          return {
            'nome': user['NOME'] ?? '',
            'email': user['EMAIL'] ?? '',
            'telefone': user['TELEFONE'] ?? '',
            'senha': user['SENHA'] ?? '',
          };
        }
      }
      return null;
    } catch (e) {
      throw Exception('Erro ao buscar usu√°rio: $e');
    }
  }

  // For√ßar atualiza√ß√£o manual
  static Future<void> forceUpdate() async {
    print('üîÑ For√ßando atualiza√ß√£o manual...');
    await _updateData();
  }

  // Obter informa√ß√µes do cache
  static Map<String, dynamic> getCacheInfo() {
    return {
      'usersCount': _cachedUsers?.length ?? 0,
      'lastUpdate': _lastUpdate?.toIso8601String(),
      'isValid': !_shouldUpdate(),
    };
  }
} 